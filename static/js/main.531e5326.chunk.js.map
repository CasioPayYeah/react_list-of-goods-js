{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","useState","isReverse","setReverse","sortField","setSortField","visibleGoods","goods","reverse","preparedGoods","sort","good1","good2","localeCompare","length","getPreparedField","className","onClick","type","toString","map","good","ReactDOM","render","document","getElementById"],"mappings":"iOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,iBACtBC,EAAoB,SAyBnB,IAAMC,EAAM,WACjB,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EA1BR,SAA0BC,EAAOH,EAAWI,GAC1C,IAAMC,EAAa,YAAOF,GAmB1B,OAjBIH,GACFK,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKN,EACH,OAAOa,EAAME,cAAcD,GAC7B,KAAKb,EACH,OAAOY,EAAMG,OAASF,EAAME,OAC9B,QACE,OAAO,MAKXN,GACFC,EAAcD,UAGTC,EAMcM,CAAiBlB,EAAiBO,EAAWF,GAMlE,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMZ,EAAaP,IAC5BoB,KAAK,SACLF,UAAS,yBAAoBZ,IAAcN,EAAsB,WAAa,IAHhF,iCAQA,wBACEmB,QAAS,kBAAMZ,EAAaN,IAC5BmB,KAAK,SACLF,UAAS,4BAAuBZ,IAAcL,EAAoB,WAAa,IAHjF,4BAQA,wBACEkB,QAxBkB,WACxBd,GAAYD,IAwBNgB,KAAK,SACLF,UAAS,6BAAqC,IAAdd,EAAqB,WAAa,IAHpE,qBAQCI,EAAaa,aAAetB,EAAgBsB,YAC3C,wBACEF,QAAS,WACPZ,EAAa,IACbF,GAAW,IAEbe,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGV,EAAac,KAAI,SAAAC,GAAI,OAAI,oBAAI,UAAQ,OAAZ,SAAoBA,aC3FtDC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.531e5326.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABET = 'alphabetically';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedField(goods, sortField, reverse) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [isReverse, setReverse] = useState(false);\n  const [sortField, setSortField] = useState('');\n  const visibleGoods = getPreparedField(goodsFromServer, sortField, isReverse);\n\n  const handleButtonClick = () => {\n    setReverse(!isReverse);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SORT_FIELD_ALPHABET)}\n          type=\"button\"\n          className={`button is-info ${sortField !== SORT_FIELD_ALPHABET ? 'is-light' : ''}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n          type=\"button\"\n          className={`button is-success ${sortField !== SORT_FIELD_LENGTH ? 'is-light' : ''}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={handleButtonClick}\n          type=\"button\"\n          className={`button is-warning ${isReverse !== true ? 'is-light' : ''}`}\n        >\n          Reverse\n        </button>\n\n        {visibleGoods.toString() !== goodsFromServer.toString() && (\n          <button\n            onClick={() => {\n              setSortField('');\n              setReverse(false);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => <li data-cy=\"Good\">{good}</li>)}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}